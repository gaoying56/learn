工厂模式的定义：

	定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。

工厂模式的优点：
	1.良好的封装性，不需要知道创建对象的过程，只需要知道类名。
	2.扩展性良好
	3.解耦

工厂模式的使用场景：
	1.工厂是new对象的替代品，所以只要需要生成对象的地方都可以使用。
	2.需要灵活扩展框架时


抽象工厂模式定义：
	为创建一组相关或相互依赖的对象提供一个接口，而无需指定它们的具体类。

抽象工厂模式的优点：
	1.封装性。每个产品的实现类不是高层模块要关系的，它关心的是接口。
	2.产品内部约束非公开。
	缺点是扩展性差

抽象工厂模式的使用场景：
	1.一组没有任何关系的对象都有相同的约束。例：在不同的操作系统上发布应用，可以设计成抽象工厂模式。


模板方法的定义：定义一个操作中的算法框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法结构即可重第一概算发的某些特性
注：模板中的基本方法尽量设计成protected，符合迪米特法则。

模板模式的优点：
	1.封装不变部分，扩展可变部分
	2.提取公共代码，便于维护
	3.行为由父类控制，子类实现

模板模式的使用场景：
	多个子类有共有方法，并且逻辑基本相同；
	重要，复杂算法

建造者模式定义：
	将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。

建造者模式的优点：
	1.封装性
	2.建造者独立，容易扩展
	3.便于控制细节风险

建造者模式的使用场景：
	1.相同的方法，不同的执行顺序，产生不同的事件结果时，可以采用建造者模式
	2.多个部件都可以装配到一个对象中，但是产生的运行结果又不相同
	3.产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能。


代理模式的优点：
	1.职责清晰
	真实的角色就是实现实际的业务逻辑，不用关系其他非本职责的事务，通过后期的代理完成一些事务，附带的结果就是变成简洁清晰

	2.高扩展
	具体主题角色是随时都会发生变化的，只要他是实现了接口，代理类完全可以在不做任何改变的情况下使用

	3.智能化

代理模式的使用场景：
	spring aop


在网络上代理服务器设置分为透明代理和普通代理，是什么意思？透明代理就是用户不用设置代理服务器地址，就可以直接访问，也就是说代理服务器对用户来说是透明的，不用知道他存在的。普通代理则是需要用户自己设置代理服务器的IP地址，永续必须知道代理的存在。普通代理就是我们要知道代理的存在，也就是类似的 
GamePlayerProxy这个类的存在，然后才能访问，强制代理则是调用者直接调用真实角色，而不用关系代理是否存在，其代理的产生是由真实角色决定的，这样的解释还是比较复杂。


普通代理，它的要求就是客户端只能访问代理角色，而不能访问真实角色






































	
